// Add: #rs = 5, #fu = 4, delay = 2
// mul: #rs = 5, #fu = 4, delay = 2
// DIV: #rs = 2, # fu= 1, delay = 3


// ADD 

F2 = F2 + F2	// 0, 1, 2, 3, 4        
F1 = F1 + F1	// 0, 1, 2, 3, 5        // Add CDB arbitration, order of operations within issue ( read value ==> write tag on reg. file )
F1 = F1 + F1	// 1, 2, 6, 7, 8        // RAW F1 + WAW F1
F3 = F3 + F3	// 1, 2, 3, 4, 6        // In order issue, OOO execution & completion
F3 = F1 + F1  	// 2, 3, 9, 10, 11      // WAW F3 + RAW F1
F4 = F1 + F1 	// 2, 5, 9, 10, 12      // Structural on res. sta ==> delayed issue; RAW corner case: issue & write CDP on the same cycle (F1); structual on ADD CDB arbitration
F6 = F2 + F5 	// 3, 6, 7, 8, 9        // Issue is stalled due to prev. inst., OOO execution 
F5 = F1 + F1 	// 3, 7, 9, 10, 13      // structual on ADD CDB arbitration: 3 at a time! 

// DIV
F7 = F14 / F7 // 4, 7, 8, 10, 11        
F15 = F14 / F15 // 4, 8, 11, 13, 14     // Structual on DIV FUs
F15 = F15 / F15 // 5, 8, 15, 17, 18     // RAW F15 

// MULT - We've taken the same ADD inst. and changed the register names ( a distjoint set of registers ). 
// We've made sure that the issue "initial conditions" are the same, hence the issue to write cdb cycles' timing is the same, w/ an offset of 9.  
// By this test, we're making sure that the above corner cases work also on another type of commands

F8 = F8 * F8	// 5
F9 = F9 * F9	// 6
F9 = F9 * F9	// 6
F10 = F10 * F10 // 7
F10 = F9 * F9  // 7
F11 = F9 * F9  // 8
F13 = F8 * F12 // 9
F12 = F9 * F9 // 9
HALT